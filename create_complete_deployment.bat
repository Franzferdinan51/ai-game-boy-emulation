@echo off\r\nsetlocal enabledelayedexpansion\r\n\r\nREM ================================================================\r\nREM AI Game System - Complete Deployment Package Creator\r\nREM ================================================================\r\nREM This script creates a complete deployment package for the AI Game System\r\nREM that includes everything needed to run on another machine or upload to GitHub\r\nREM ================================================================\r\n\r\ntitle AI Game System - Complete Deployment Package Creator\r\n\r\necho ================================================================\r\necho == AI Game System - Complete Deployment Package Creator      \r\necho ================================================================\r\necho.\r\n\r\nREM Configuration\r\nset \"PACKAGE_NAME=AI-PyBoy-Complete-Deployment\"\r\nset \"PACKAGE_VERSION=2.0.0\"\r\nset \"TIMESTAMP=%date:~-4,4%%date:~-7,2%%date:~-10,2%_%time:~0,2%%time:~3,2%\"\r\nset \"TIMESTAMP=%TIMESTAMP: =0%\"\r\nset \"PACKAGE_DIR=%PACKAGE_NAME%-v%PACKAGE_VERSION%-%TIMESTAMP%\"\r\nset \"TEMP_DIR=%TEMP%\\AI_PyBoy_Deployment\"\r\n\r\nREM Create package directory\r\necho [INFO] Creating deployment package directory...\r\nif exist \"%PACKAGE_DIR%\" rmdir /s /q \"%PACKAGE_DIR%\"\r\nmkdir \"%PACKAGE_DIR%\"\r\n\r\necho [INFO] Package directory: %PACKAGE_DIR%\r\necho.\r\n\r\nREM ================================================================\r\nREM STEP 1: Copy Core Backend Files\r\nREM ================================================================\r\necho [STEP 1/8] Copying core backend files...\r\n\r\nREM Create backend directory structure\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\tests\"\r\n\r\nREM Copy essential backend files\r\ncopy \"ai-game-server\\config.py\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\requirements.txt\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\start_server.bat\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\start_server.sh\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\README.md\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\main.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\__init__.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\server.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_chat_endpoint.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_apis\\ai_api_base.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_apis\\ai_provider_manager.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_apis\\gemini_api.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_apis\\openrouter_api.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_apis\\openai_compatible.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_apis\\nvidia_api.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\emulators\\emulator_interface.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\emulators\\pyboy_emulator.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\emulators\\pygba_emulator.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\ncopy \"ai-game-server\\tests\\test_server.py\" \"%PACKAGE_DIR%\\ai-game-server\\tests\\\" >nul 2>&1\r\n\r\necho [OK] Backend files copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 2: Copy Core Frontend Files\r\nREM ================================================================\r\necho.\r\necho [STEP 2/8] Copying core frontend files...\r\n\r\nREM Create frontend directory structure\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\components\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\services\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\dist\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\dist\\assets\"\r\n\r\nREM Copy essential frontend files\r\ncopy \"ai-game-assistant\\.env.local\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\.gitignore\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\package.json\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\package-lock.json\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\tsconfig.json\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\vite.config.ts\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\index.html\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\index.tsx\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\types.ts\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\index.css\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\App.tsx\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\README.md\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\n\r\nREM Copy components\r\ncopy \"ai-game-assistant\\components\\*.tsx\" \"%PACKAGE_DIR%\\ai-game-assistant\\components\\\" >nul 2>&1\r\n\r\nREM Copy services\r\ncopy \"ai-game-assistant\\services\\*.ts\" \"%PACKAGE_DIR%\\ai-game-assistant\\services\\\" >nul 2>&1\r\n\r\nREM Copy built frontend files if they exist\r\nif exist \"ai-game-assistant\\dist\\index.html\" (\r\n    copy \"ai-game-assistant\\dist\\index.html\" \"%PACKAGE_DIR%\\ai-game-assistant\\dist\\\" >nul 2>&1\r\n    xcopy \"ai-game-assistant\\dist\\assets\" \"%PACKAGE_DIR%\\ai-game-assistant\\dist\\assets\\\" /E /I /Y >nul 2>&1\r\n)\r\n\r\necho [OK] Frontend files copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 3: Copy Emulators\r\nREM ================================================================\r\necho.\r\necho [STEP 3/8] Copying emulators...\r\n\r\nREM Copy PyBoy\r\nif exist \"PyBoy\" (\r\n    mkdir \"%PACKAGE_DIR%\\PyBoy\"\r\n    xcopy \"PyBoy\" \"%PACKAGE_DIR%\\PyBoy\\\" /E /I /Y >nul 2>&1\r\n    echo [OK] PyBoy emulator included\r\n) else (\r\n    echo [WARNING] PyBoy directory not found - skipping\r\n)\r\n\r\nREM Copy PyGBA\r\nif exist \"pygba\" (\r\n    mkdir \"%PACKAGE_DIR%\\pygba\"\r\n    xcopy \"pygba\" \"%PACKAGE_DIR%\\pygba\\\" /E /I /Y >nul 2>&1\r\n    echo [OK] PyGBA emulator included\r\n) else (\r\n    echo [WARNING] pygba directory not found - skipping\r\n)\r\n\r\nREM ================================================================\r\nREM STEP 4: Copy Startup Scripts\r\nREM ================================================================\r\necho.\r\necho [STEP 4/8] Copying startup scripts...\r\n\r\ncopy \"unified_startup.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"unified_startup.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"unified_startup.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"install_dependencies.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"install_dependencies.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"install_dependencies.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"start_system.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"start_system.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"start_system.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n\r\necho [OK] Startup scripts copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 5: Copy Documentation\r\nREM ================================================================\r\necho.\r\necho [STEP 5/8] Copying documentation...\r\n\r\ncopy \"README.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"CLAUDE.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"ai-game-server\\README.md\" \"%PACKAGE_DIR%\\ai-game-server\\README.md\" >nul 2>&1\r\ncopy \"ai-game-assistant\\README.md\" \"%PACKAGE_DIR%\\ai-game-assistant\\README.md\" >nul 2>&1\r\ncopy \"README_DEPLOYMENT.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"VERSION_2.0.0_UPDATE_SUMMARY.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"RELEASE_SUMMARY_v2.0.0.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n\r\necho [OK] Documentation copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 6: Copy Configuration Files\r\nREM ================================================================\r\necho.\r\necho [STEP 6/8] Copying configuration files...\r\n\r\ncopy \"*.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"*.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"*.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"*.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n\r\necho [OK] Configuration files copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 7: Create GitHub-Ready Structure\r\nREM ================================================================\r\necho.\r\necho [STEP 7/8] Creating GitHub-ready structure...\r\n\r\nREM Create LICENSE file (MIT License)\r\n(\r\necho MIT License\r\necho.\r\necho Copyright (c) 2025 AI Game System Contributors\r\necho.\r\necho Permission is hereby granted, free of charge, to any person obtaining a copy\r\necho of this software and associated documentation files (the \"Software\"), to deal\r\necho in the Software without restriction, including without limitation the rights\r\necho to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\necho copies of the Software, and to permit persons to whom the Software is\r\necho furnished to do so, subject to the following conditions:\r\necho.\r\necho The above copyright notice and this permission notice shall be included in all\r\necho copies or substantial portions of the Software.\r\necho.\r\necho THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\necho IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\necho FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\necho AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\necho LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\necho OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\necho SOFTWARE.\r\n) > \"%PACKAGE_DIR%\\LICENSE\"\r\n\r\nREM Create .gitignore\r\n(\r\necho # Dependencies\r\necho node_modules/\r\necho *.log\r\necho .env\r\necho .env.local\r\necho\r\necho # Build outputs\r\necho dist/\r\necho build/\r\necho\r\necho # IDE files\r\necho .vscode/\r\necho .idea/\r\necho *.swp\r\necho *.swo\r\necho\r\necho # OS generated files\r\necho Thumbs.db\r\necho .DS_Store\r\necho\r\necho # Python\r\necho __pycache__/\r\necho *.pyc\r\necho .venv/\r\necho .env\r\n) > \"%PACKAGE_DIR%\\.gitignore\"\r\n\r\necho [OK] GitHub-ready structure created\r\n\r\nREM ================================================================\r\nREM STEP 8: Create Installation Instructions\r\nREM ================================================================\r\necho.\r\necho [STEP 8/8] Creating installation instructions...\r\n\r\n(\r\necho # AI Game System\r\necho.\r\necho A comprehensive multi-component emulation and AI gaming system featuring Game Boy and Game Boy Advance emulators with integrated AI APIs.\r\necho.\r\necho ## 🚀 Quick Start\r\necho.\r\necho 1. Clone the repository:\r\necho    ```bash\r\necho    git clone https://github.com/Franzferdinan51/AI-PyBoy.git\r\necho    cd AI-PyBoy\r\necho    ```\r\necho.\r\necho 2. Install dependencies:\r\necho    ```bash\r\necho    # On Windows\r\necho    install_dependencies.bat\r\necho.\r\necho    # On macOS/Linux\r\necho    chmod +x install_dependencies.sh\r\necho    ./install_dependencies.sh\r\necho    ```\r\necho.\r\necho 3. Start the system:\r\necho    ```bash\r\necho    # On Windows\r\necho    unified_startup.bat\r\necho.\r\necho    # On macOS/Linux\r\necho    chmod +x unified_startup.sh\r\necho    ./unified_startup.sh\r\necho    ```\r\necho.\r\necho 4. Open your browser and navigate to: http://localhost:5173\r\necho.\r\necho ## 📋 System Requirements\r\necho.\r\necho - **Operating System**: Windows 10/11, macOS, or Linux\r\necho - **Python**: 3.8 or higher\r\necho - **Node.js**: 18.0 or higher\r\necho - **RAM**: 4GB minimum, 8GB recommended\r\necho - **Storage**: 500MB free space\r\necho.\r\necho ## 🛠️ Installation Instructions\r\necho.\r\necho ### Method 1: Automated Installation (Recommended)\r\necho.\r\necho 1. Run the unified startup script:\r\necho    - **Windows**: Double-click `unified_startup.bat`\r\necho    - **macOS/Linux**: Run `./unified_startup.sh`\r\necho.\r\necho ### Method 2: Manual Installation\r\necho.\r\necho 1. Install Python dependencies:\r\necho    ```bash\r\necho    pip install -r ai-game-server/requirements.txt\r\necho    pip install pyboy\r\necho    pip install pygba\r\necho    ```\r\necho.\r\necho 2. Install Node.js dependencies:\r\necho    ```bash\r\necho    cd ai-game-assistant\r\necho    npm install\r\necho    cd ..\r\necho    ```\r\necho.\r\necho 3. Start the backend server:\r\necho    ```bash\r\necho    cd ai-game-server\r\necho    python src/main.py\r\necho    ```\r\necho.\r\necho 4. Start the frontend application:\r\necho    ```bash\r\necho    cd ai-game-assistant\r\necho    npm run dev\r\necho    ```\r\necho.\r\necho ## 🎮 Usage\r\necho.\r\necho 1. Configure AI providers in the Settings panel\r\necho 2. Load ROM files using the \"Load ROM\" button\r\necho 3. Set your AI goal in the control panel\r\necho 4. Start the AI with the \"Start AI\" button\r\necho.\r\necho ## 🤝 Contributing\r\necho.\r\necho We welcome contributions! Please see our contributing guidelines for details.\r\necho.\r\necho ## 📄 License\r\necho.\r\necho This project is licensed under the MIT License - see the LICENSE file for details.\r\n) > \"%PACKAGE_DIR%\\README.md\"\r\n\r\necho [OK] Installation instructions created\r\n\r\nREM ================================================================\r\nREM FINAL STEPS\r\nREM ================================================================\r\necho.\r\necho ================================================================\r\necho == Package Creation Complete!                               \r\necho ================================================================\r\necho.\r\necho [SUCCESS] Complete deployment package created successfully!\r\necho.\r\necho [PACKAGE DETAILS]\r\necho -----------------\r\necho Package Name: %PACKAGE_DIR%\r\necho Location: %CD%\\%PACKAGE_DIR%\r\necho Version: %PACKAGE_VERSION%\r\necho.\r\necho [PACKAGE CONTENTS]\r\necho ------------------\r\necho ✓ Core backend server files\r\necho ✓ Core frontend web interface\r\necho ✓ PyBoy emulator\r\necho ✓ PyGBA emulator\r\necho ✓ Startup scripts for all platforms\r\necho ✓ Dependency installation scripts\r\necho ✓ Complete documentation\r\necho ✓ GitHub-ready structure\r\necho.\r\necho [CREATING ZIP ARCHIVE]\r\necho ----------------------\r\necho Creating ZIP archive for easy distribution...\r\npowershell -Command \"Compress-Archive -Path '%PACKAGE_DIR%' -DestinationPath '%PACKAGE_DIR%.zip' -Force\"\r\nif %errorlevel% equ 0 (\r\n    echo [SUCCESS] ZIP archive created: %PACKAGE_DIR%.zip\r\n    echo.\r\n    echo [ARCHIVE INFO]\r\n    echo --------------\r\n    for %%A in (\"%PACKAGE_DIR%.zip\") do (\r\n        echo Archive File: %%~nxA\r\n        echo Archive Size: %%~zA bytes\r\n    )\r\n) else (\r\n    echo [ERROR] Failed to create ZIP archive\r\n)\r\n\r\necho.\r\necho [DEPLOYMENT COMPLETE]\r\necho =====================\r\necho Your AI Game System complete deployment package is ready!\r\necho.\r\necho Package Directory: %CD%\\%PACKAGE_DIR%\r\necho Package Version: %PACKAGE_VERSION%\r\necho.\r\necho You can now:\r\necho 1. Upload the ZIP file to GitHub\r\necho 2. Extract and run on another machine\r\necho 3. Use as a complete development environment\r\necho.\r\npause\r\nexit /b 0
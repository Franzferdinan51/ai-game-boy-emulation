@echo off\r\nsetlocal enabledelayedexpansion\r\n\r\nREM ================================================================\r\nREM AI Game System - GitHub Deployment Package Creator\r\nREM ================================================================\r\nREM This script creates a complete deployment package for the AI Game System\r\nREM that includes everything needed to run on another machine or upload to GitHub\r\nREM ================================================================\r\n\r\ntitle AI Game System - GitHub Deployment Package Creator\r\n\r\necho ================================================================\r\necho == AI Game System - GitHub Deployment Package Creator          \r\necho ================================================================\r\necho.\r\n\r\nREM Configuration\r\nset \"PACKAGE_NAME=AI-PyBoy-GitHub-Deployment\"\r\nset \"PACKAGE_VERSION=2.0.0\"\r\nset \"TIMESTAMP=%date:~-4,4%%date:~-7,2%%date:~-10,2%_%time:~0,2%%time:~3,2%\"\r\nset \"TIMESTAMP=%TIMESTAMP: =0%\"\r\nset \"PACKAGE_DIR=%PACKAGE_NAME%-v%PACKAGE_VERSION%-%TIMESTAMP%\"\r\nset \"INCLUDE_PYBOY=true\"\r\nset \"INCLUDE_PYGBA=true\"\r\nset \"INCLUDE_DOCUMENTATION=true\"\r\n\r\nREM Create package directory\r\necho [INFO] Creating GitHub deployment package directory...\r\nif exist \"%PACKAGE_DIR%\" rmdir /s /q \"%PACKAGE_DIR%\"\r\nmkdir \"%PACKAGE_DIR%\"\r\n\r\necho [INFO] Package directory: %PACKAGE_DIR%\r\necho.\r\n\r\nREM ================================================================\r\nREM STEP 1: Copy Core Backend Files\r\nREM ================================================================\r\necho [STEP 1/10] Copying core backend files...\r\n\r\nREM Create backend directory structure\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-server\\tests\"\r\n\r\nREM Copy essential backend files\r\ncopy \"ai-game-server\\config.py\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\requirements.txt\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\start_server.bat\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\start_server.sh\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\README.md\" \"%PACKAGE_DIR%\\ai-game-server\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\main.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\__init__.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\server.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ai_chat_endpoint.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ui_config.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ui_launcher.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\src\\backend\\ui_process_manager.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\\" >nul 2>&1\r\ncopy \"ai-game-server\\tests\\test_server.py\" \"%PACKAGE_DIR%\\ai-game-server\\tests\\\" >nul 2>&1\r\n\r\nREM Copy AI API files\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\ai_api_base.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\ai_api_base.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\ai_provider_manager.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\ai_provider_manager.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\gemini_api.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\gemini_api.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\openrouter_api.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\openrouter_api.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\openai_compatible.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\openai_compatible.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\nvidia_api.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\nvidia_api.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\ai_apis\\__init__.py\" (\r\n    copy \"ai-game-server\\src\\backend\\ai_apis\\__init__.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\\" >nul 2>&1\r\n)\r\n\r\nREM Copy emulator files\r\nif exist \"ai-game-server\\src\\backend\\emulators\\emulator_interface.py\" (\r\n    copy \"ai-game-server\\src\\backend\\emulators\\emulator_interface.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\emulators\\pyboy_emulator.py\" (\r\n    copy \"ai-game-server\\src\\backend\\emulators\\pyboy_emulator.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\emulators\\pygba_emulator.py\" (\r\n    copy \"ai-game-server\\src\\backend\\emulators\\pygba_emulator.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\n)\r\nif exist \"ai-game-server\\src\\backend\\emulators\\__init__.py\" (\r\n    copy \"ai-game-server\\src\\backend\\emulators\\__init__.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\\" >nul 2>&1\r\n)\r\n\r\nREM Copy utility files\r\nif exist \"ai-game-server\\src\\backend\\utils\\__init__.py\" (\r\n    copy \"ai-game-server\\src\\backend\\utils\\__init__.py\" \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils\\\" >nul 2>&1\r\n)\r\n\r\necho [OK] Backend files copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 2: Copy Core Frontend Files\r\nREM ================================================================\r\necho.\r\necho [STEP 2/10] Copying core frontend files...\r\n\r\nREM Create frontend directory structure\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\components\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\services\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\dist\"\r\nmkdir \"%PACKAGE_DIR%\\ai-game-assistant\\dist\\assets\"\r\n\r\nREM Copy essential frontend files\r\ncopy \"ai-game-assistant\\.env.local\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\.gitignore\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\package.json\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\package-lock.json\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\tsconfig.json\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\vite.config.ts\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\index.html\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\index.tsx\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\types.ts\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\index.css\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\App.tsx\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\ncopy \"ai-game-assistant\\README.md\" \"%PACKAGE_DIR%\\ai-game-assistant\\\" >nul 2>&1\r\n\r\nREM Copy components if they exist\r\nif exist \"ai-game-assistant\\components\\*.tsx\" (\r\n    copy \"ai-game-assistant\\components\\*.tsx\" \"%PACKAGE_DIR%\\ai-game-assistant\\components\\\" >nul 2>&1\r\n)\r\n\r\nREM Copy services if they exist\r\nif exist \"ai-game-assistant\\services\\*.ts\" (\r\n    copy \"ai-game-assistant\\services\\*.ts\" \"%PACKAGE_DIR%\\ai-game-assistant\\services\\\" >nul 2>&1\r\n)\r\n\r\nREM Copy built frontend files if they exist\r\nif exist \"ai-game-assistant\\dist\\index.html\" (\r\n    copy \"ai-game-assistant\\dist\\index.html\" \"%PACKAGE_DIR%\\ai-game-assistant\\dist\\\" >nul 2>&1\r\n    if exist \"ai-game-assistant\\dist\\assets\" (\r\n        xcopy \"ai-game-assistant\\dist\\assets\" \"%PACKAGE_DIR%\\ai-game-assistant\\dist\\assets\\\" /E /I /Y >nul 2>&1\r\n    )\r\n)\r\n\r\necho [OK] Frontend files copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 3: Copy PyBoy Emulator\r\nREM ================================================================\r\necho.\r\necho [STEP 3/10] Copying PyBoy emulator...\r\n\r\nif \"%INCLUDE_PYBOY%\"==\"true\" (\r\n    if exist \"PyBoy\" (\r\n        mkdir \"%PACKAGE_DIR%\\PyBoy\"\r\n        xcopy \"PyBoy\" \"%PACKAGE_DIR%\\PyBoy\\\" /E /I /Y >nul 2>&1\r\n        echo [OK] PyBoy emulator included\r\n    ) else (\r\n        echo [WARNING] PyBoy directory not found - skipping\r\n    )\r\n)\r\n\r\nREM ================================================================\r\nREM STEP 4: Copy PyGBA Emulator\r\nREM ================================================================\r\necho.\r\necho [STEP 4/10] Copying PyGBA emulator...\r\n\r\nif \"%INCLUDE_PYGBA%\"==\"true\" (\r\n    if exist \"pygba\" (\r\n        mkdir \"%PACKAGE_DIR%\\pygba\"\r\n        xcopy \"pygba\" \"%PACKAGE_DIR%\\pygba\\\" /E /I /Y >nul 2>&1\r\n        echo [OK] PyGBA emulator included\r\n    ) else (\r\n        echo [WARNING] pygba directory not found - skipping\r\n    )\r\n)\r\n\r\nREM ================================================================\r\nREM STEP 5: Copy Startup Scripts\r\nREM ================================================================\r\necho.\r\necho [STEP 5/10] Copying startup scripts...\r\n\r\ncopy \"unified_startup.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"unified_startup.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"unified_startup.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"install_dependencies.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"install_dependencies.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"install_dependencies.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"start_system.bat\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"start_system.ps1\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\ncopy \"start_system.sh\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n\r\necho [OK] Startup scripts copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 6: Copy Documentation\r\nREM ================================================================\r\necho.\r\necho [STEP 6/10] Copying documentation...\r\n\r\nif \"%INCLUDE_DOCUMENTATION%\"==\"true\" (\r\n    copy \"README.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"CLAUDE.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"README_DEPLOYMENT.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"VERSION_2.0.0_UPDATE_SUMMARY.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"RELEASE_SUMMARY_v2.0.0.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"AI_PROVIDER_SETUP.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"AI_PROVIDER_CHANGES_SUMMARY.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"IMPLEMENTATION_SUMMARY.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"UI_SETUP_GUIDE.md\" \"%PACKAGE_DIR%\\\" >nul 2>&1\r\n    copy \"ai-game-server\\README.md\" \"%PACKAGE_DIR%\\ai-game-server\\README.md\" >nul 2>&1\r\n    copy \"ai-game-assistant\\README.md\" \"%PACKAGE_DIR%\\ai-game-assistant\\README.md\" >nul 2>&1\r\n)\r\n\r\necho [OK] Documentation copied successfully\r\n\r\nREM ================================================================\r\nREM STEP 7: Create GitHub-Ready Structure\r\nREM ================================================================\r\necho.\r\necho [STEP 7/10] Creating GitHub-ready structure...\r\n\r\nREM Create LICENSE file (MIT License)\r\n(\r\necho MIT License\r\necho.\r\necho Copyright (c) 2025 AI Game System Contributors\r\necho.\r\necho Permission is hereby granted, free of charge, to any person obtaining a copy\r\necho of this software and associated documentation files (the \"Software\"), to deal\r\necho in the Software without restriction, including without limitation the rights\r\necho to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\necho copies of the Software, and to permit persons to whom the Software is\r\necho furnished to do so, subject to the following conditions:\r\necho.\r\necho The above copyright notice and this permission notice shall be included in all\r\necho copies or substantial portions of the Software.\r\necho.\r\necho THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\necho IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\necho FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\necho AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\necho LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\necho OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\necho SOFTWARE.\r\n) > \"%PACKAGE_DIR%\\LICENSE\"\r\n\r\nREM Create .gitignore\r\n(\r\necho # Dependencies\r\necho node_modules/\r\necho *.log\r\necho .env\r\necho .env.local\r\necho\r\necho # Build outputs\r\necho dist/\r\necho build/\r\necho\r\necho # IDE files\r\necho .vscode/\r\necho .idea/\r\necho *.swp\r\necho *.swo\r\necho\r\necho # OS generated files\r\necho Thumbs.db\r\necho .DS_Store\r\necho\r\necho # Python\r\necho __pycache__/\r\necho *.pyc\r\necho .venv/\r\necho\r\necho # Emulator files\r\necho *.gb\r\necho *.gbc\r\necho *.gba\r\necho *.sav\r\necho *.state\r\necho\r\necho # Temporary files\r\necho temp/\r\necho tmp/\r\necho\r\necho # Log files\r\necho logs/\r\necho *.log\r\n) > \"%PACKAGE_DIR%\\.gitignore\"\r\n\r\necho [OK] GitHub-ready structure created\r\n\r\nREM ================================================================\r\nREM STEP 8: Create Version Files\r\nREM ================================================================\r\necho.\r\necho [STEP 8/10] Creating version files...\r\n\r\nREM Create backend version file\r\n(\r\necho \"\"\"\"\r\necho AI Game Server - Backend Package\r\necho \"\"\"\"\r\necho.\r\necho __version__ = \"2.0.0\"\r\n) > \"%PACKAGE_DIR%\\ai-game-server\\src\\backend\\__init__.py\"\r\n\r\nREM Create frontend version file\r\n(\r\necho /**\r\necho  * AI Game Assistant Version\r\necho  */\r\necho export const VERSION = \"2.0.0\";\r\n) > \"%PACKAGE_DIR%\\ai-game-assistant\\src\\version.ts\"\r\n\r\necho [OK] Version files created\r\n\r\nREM ================================================================\r\nREM STEP 9: Create Installation Instructions\r\nREM ================================================================\r\necho.\r\necho [STEP 9/10] Creating installation instructions...\r\n\r\n(\r\necho # AI Game System\r\necho.\r\necho A comprehensive multi-component emulation and AI gaming system featuring Game Boy and Game Boy Advance emulators with integrated AI APIs.\r\necho.\r\necho ## 🚀 Quick Start\r\necho.\r\necho 1. Clone the repository:\r\necho    ```bash\r\necho    git clone https://github.com/Franzferdinan51/AI-PyBoy.git\r\necho    cd AI-PyBoy\r\necho    ```\r\necho.\r\necho 2. Install dependencies:\r\necho    ```bash\r\necho    # On Windows\r\necho    install_dependencies.bat\r\necho.\r\necho    # On macOS/Linux\r\necho    chmod +x install_dependencies.sh\r\necho    ./install_dependencies.sh\r\necho    ```\r\necho.\r\necho 3. Start the system:\r\necho    ```bash\r\necho    # On Windows\r\necho    unified_startup.bat\r\necho.\r\necho    # On macOS/Linux\r\necho    chmod +x unified_startup.sh\r\necho    ./unified_startup.sh\r\necho    ```\r\necho.\r\necho 4. Open your browser and navigate to: http://localhost:5173\r\necho.\r\necho ## 📋 System Requirements\r\necho.\r\necho ### Minimum Requirements\r\necho - **Operating System**: Windows 10/11, macOS, or Linux\r\necho - **Python**: 3.8 or higher\r\necho - **Node.js**: 18.0 or higher\r\necho - **RAM**: 4GB minimum, 8GB recommended\r\necho - **Storage**: 500MB free space\r\necho.\r\necho ### Recommended Requirements\r\necho - **Operating System**: Windows 11, macOS, or Linux\r\necho - **Python**: 3.10 or higher\r\necho - **Node.js**: 20.0 or higher\r\necho - **RAM**: 16GB or more\r\necho - **Storage**: 1GB free space\r\necho - **Internet Connection**: For AI API access\r\necho.\r\necho ## 🛠️ Installation Instructions\r\necho.\r\necho ### Method 1: Automated Installation (Recommended)\r\necho.\r\necho 1. Run the unified startup script:\r\necho    - **Windows**: Double-click `unified_startup.bat`\r\necho    - **macOS/Linux**: Run `./unified_startup.sh`\r\necho.\r\necho ### Method 2: Manual Installation\r\necho.\r\necho 1. Install Python dependencies:\r\necho    ```bash\r\necho    pip install -r ai-game-server/requirements.txt\r\necho    pip install pyboy\r\necho    pip install pygba\r\necho    ```\r\necho.\r\necho 2. Install Node.js dependencies:\r\necho    ```bash\r\necho    cd ai-game-assistant\r\necho    npm install\r\necho    cd ..\r\necho    ```\r\necho.\r\necho 3. Start the backend server:\r\necho    ```bash\r\necho    cd ai-game-server\r\necho    python src/main.py\r\necho    ```\r\necho.\r\necho 4. Start the frontend application:\r\necho    ```bash\r\necho    cd ai-game-assistant\r\necho    npm run dev\r\necho    ```\r\necho.\r\necho ## 🎯 Quick Start Guide\r\necho.\r\necho ### First Time Setup\r\necho.\r\necho 1. **Run the startup script:**\r\necho    ```bash\r\necho    unified_startup.bat\r\necho    ```\r\necho.\r\necho 2. **Choose your startup mode:**\r\necho    - **Option 1:** Basic Startup (Quick start)\r\necho    - **Option 9:** Ultimate Mode (All features enabled)\r\necho.\r\necho 3. **Wait for services to start:**\r\necho    - Backend server: http://localhost:5000\r\necho    - Frontend application: http://localhost:5173\r\necho    - Service Monitor: http://localhost:8080 (Ultimate mode only)\r\necho.\r\necho ### Using the Web Interface\r\necho.\r\necho 1. **Open your browser** and navigate to: http://localhost:5173\r\necho 2. **Configure AI APIs** in the settings:\r\necho    - Add your API keys for Gemini, OpenRouter, or NVIDIA NIM\r\necho    - Select your preferred AI provider\r\necho 3. **Load ROM files** or use built-in games\r\necho 4. **Start playing** with AI assistance!\r\necho.\r\necho ## 🤝 Contributing\r\necho.\r\necho We welcome contributions! Please see our contributing guidelines for details.\r\necho.\r\necho ## 📄 License\r\necho.\r\necho This project is licensed under the MIT License - see the LICENSE file for details.\r\n) > \"%PACKAGE_DIR%\\README.md\"\r\n\r\necho [OK] Installation instructions created\r\n\r\nREM ================================================================\r\nREM STEP 10: Create Deployment Package\r\nREM ================================================================\r\necho.\r\necho [STEP 10/10] Creating deployment package...\r\n\r\nREM Create ZIP file\r\necho [INFO] Creating ZIP archive...\r\npowershell -Command \"Compress-Archive -Path '%PACKAGE_DIR%\\*' -DestinationPath '%PACKAGE_DIR%.zip' -Force\"\r\nif %errorlevel% equ 0 (\r\n    echo [SUCCESS] Deployment package created: %PACKAGE_DIR%.zip\r\n) else (\r\n    echo [ERROR] Failed to create deployment package\r\n)\r\n\r\necho.\r\necho ================================================================\r\necho == GitHub Deployment Package Creation Complete!              \r\necho ================================================================\r\necho.\r\necho [SUCCESS] GitHub-ready deployment package created successfully!\r\necho.\r\necho [PACKAGE DETAILS]\r\necho -----------------\r\necho Package Name: %PACKAGE_DIR%\r\necho Location: %CD%\\%PACKAGE_DIR%\r\necho Archive: %PACKAGE_DIR%.zip\r\necho Version: %PACKAGE_VERSION%\r\necho.\r\necho [CONTENTS INCLUDED]\r\necho -------------------\r\necho ✓ Core backend server files\r\necho ✓ Core frontend web interface\r\necho ✓ PyBoy emulator\r\necho ✓ PyGBA emulator\r\necho ✓ Startup scripts for all platforms\r\necho ✓ Dependency installation scripts\r\necho ✓ Complete documentation\r\necho ✓ GitHub-ready structure (LICENSE, .gitignore)\r\necho ✓ Installation instructions\r\necho ✓ Version tracking files\r\necho.\r\necho [READY FOR GITHUB]\r\necho ------------------\r\necho 1. Extract the package to your desired location\r\necho 2. Initialize a git repository: git init\r\necho 3. Add files: git add .\r\necho 4. Commit: git commit -m \"Initial commit\"\r\necho 5. Add remote: git remote add origin https://github.com/Franzferdinan51/AI-PyBoy.git\r\necho 6. Push to dev branch: git push -u origin dev\r\necho.\r\necho [READY FOR DEPLOYMENT]\r\necho ---------------------\r\necho 1. Extract the package to the target system\r\necho 2. Run \"install_dependencies.bat\" to install required packages\r\necho 3. Run \"unified_startup.bat\" to start the system\r\necho 4. Access the web interface at http://localhost:5173\r\necho.\r\npause\r\nexit /b 0
@echo off\nsetlocal enabledelayedexpansion\n\nREM ================================================================\nREM AI Game System - Deployment Package Creator\nREM ================================================================\nREM This script creates a clean deployment package for the AI Game System\nREM It copies only the essential files needed for deployment\nREM ================================================================\n\ntitle AI Game System - Deployment Package Creator\n\necho ================================================================\necho == AI Game System - Deployment Package Creator             \necho ================================================================\necho.\n\nREM Check if we're in the correct directory\nif not exist "ai-game-server\\src\\main.py" (\n    echo [ERROR] Cannot find backend server files.\n    echo        Please run this script from the root directory containing ai-game-server and ai-game-assistant folders.\n    echo.\n    pause\n    exit /b 1\n)\n\nif not exist "ai-game-assistant\\package.json" (\n    echo [ERROR] Cannot find frontend files.\n    echo        Please run this script from the root directory containing ai-game-server and ai-game-assistant folders.\n    echo.\n    pause\n    exit /b 1\n)\n\nREM Configuration\nset "PACKAGE_NAME=AI_Game_System_Deployment"\nset "PACKAGE_VERSION=2.0.0"\nset "TIMESTAMP=%date:~-4,4%%date:~-7,2%%date:~-10,2%_%time:~0,2%%time:~3,2%"\nset "TIMESTAMP=%TIMESTAMP: =0%"\nset "PACKAGE_DIR=%PACKAGE_NAME%_v%PACKAGE_VERSION%_%TIMESTAMP%"\nset "INCLUDE_PYBOY=true"\nset "INCLUDE_PYGBA=true"\nset "INCLUDE_DOCUMENTATION=true"\n\nREM Create package directory\necho [INFO] Creating deployment package directory...\nif exist "%PACKAGE_DIR%" rmdir /s /q "%PACKAGE_DIR%"\nmkdir "%PACKAGE_DIR%"\n\necho [INFO] Package directory: %PACKAGE_DIR%\necho.\n\nREM ================================================================\nREM STEP 1: Copy Core Backend Files\nREM ================================================================\necho [STEP 1/6] Copying core backend files...\n\nREM Create backend directory structure\nmkdir "%PACKAGE_DIR%\\ai-game-server"\nmkdir "%PACKAGE_DIR%\\ai-game-server\\src"\nmkdir "%PACKAGE_DIR%\\ai-game-server\\src\\backend"\nmkdir "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis"\nmkdir "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators"\nmkdir "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils"\nmkdir "%PACKAGE_DIR%\\ai-game-server\\tests"\n\nREM Copy essential backend files\ncopy "ai-game-server\\config.py" "%PACKAGE_DIR%\\ai-game-server\\" >nul 2>&1\ncopy "ai-game-server\\requirements.txt" "%PACKAGE_DIR%\\ai-game-server\\" >nul 2>&1\ncopy "ai-game-server\\start_server.bat" "%PACKAGE_DIR%\\ai-game-server\\" >nul 2>&1\ncopy "ai-game-server\\start_server.sh" "%PACKAGE_DIR%\\ai-game-server\\" >nul 2>&1\ncopy "ai-game-server\\src\\main.py" "%PACKAGE_DIR%\\ai-game-server\\src\\" >nul 2>&1\ncopy "ai-game-server\\src\\backend\\__init__.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\" >nul 2>&1\ncopy "ai-game-server\\src\\backend\\server.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\" >nul 2>&1\ncopy "ai-game-server\\src\\backend\\ai_chat_endpoint.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\" >nul 2>&1\ncopy "ai-game-server\\tests\\test_server.py" "%PACKAGE_DIR%\\ai-game-server\\tests\\" >nul 2>&1\n\nREM Copy AI API files if they exist\nif exist "ai-game-server\\src\\backend\\ai_apis\\gemini_api.py" (\n    copy "ai-game-server\\src\\backend\\ai_apis\\gemini_api.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\" >nul 2>&1\n)\nif exist "ai-game-server\\src\\backend\\ai_apis\\openai_api.py" (\n    copy "ai-game-server\\src\\backend\\ai_apis\\openai_api.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\" >nul 2>&1\n)\nif exist "ai-game-server\\src\\backend\\ai_apis\\nvidia_nim_api.py" (\n    copy "ai-game-server\\src\\backend\\ai_apis\\nvidia_nim_api.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\ai_apis\\" >nul 2>&1\n)\n\nREM Copy emulator files if they exist\nif exist "ai-game-server\\src\\backend\\emulators\\pyboy_wrapper.py" (\n    copy "ai-game-server\\src\\backend\\emulators\\pyboy_wrapper.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\" >nul 2>&1\n)\nif exist "ai-game-server\\src\\backend\\emulators\\pygba_wrapper.py" (\n    copy "ai-game-server\\src\\backend\\emulators\\pygba_wrapper.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\emulators\\" >nul 2>&1\n)\n\nREM Copy utility files if they exist\nif exist "ai-game-server\\src\\backend\\utils\\game_utils.py" (\n    copy "ai-game-server\\src\\backend\\utils\\game_utils.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils\\" >nul 2>&1\n)\nif exist "ai-game-server\\src\\backend\\utils\\file_utils.py" (\n    copy "ai-game-server\\src\\backend\\utils\\file_utils.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils\\" >nul 2>&1\n)\nif exist "ai-game-server\\src\\backend\\utils\\system_utils.py" (\n    copy "ai-game-server\\src\\backend\\utils\\system_utils.py" "%PACKAGE_DIR%\\ai-game-server\\src\\backend\\utils\\" >nul 2>&1\n)\n\necho [OK] Backend files copied successfully\n\nREM ================================================================\nREM STEP 2: Copy Core Frontend Files\nREM ================================================================\necho.\necho [STEP 2/6] Copying core frontend files...\n\nREM Create frontend directory structure\nmkdir "%PACKAGE_DIR%\\ai-game-assistant"\nmkdir "%PACKAGE_DIR%\\ai-game-assistant\\components"\nmkdir "%PACKAGE_DIR%\\ai-game-assistant\\services"\nmkdir "%PACKAGE_DIR%\\ai-game-assistant\\dist"\nmkdir "%PACKAGE_DIR%\\ai-game-assistant\\dist\\assets"\n\nREM Copy essential frontend files\ncopy "ai-game-assistant\\.env.local" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\.gitignore" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\package.json" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\package-lock.json" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\tsconfig.json" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\vite.config.ts" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\index.html" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\index.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\types.ts" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\index.css" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\ncopy "ai-game-assistant\\App.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\n\nREM Copy components if they exist\nif exist "ai-game-assistant\\components\\GameBoy.tsx" (\n    copy "ai-game-assistant\\components\\GameBoy.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\components\\GameControls.tsx" (\n    copy "ai-game-assistant\\components\\GameControls.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\components\\AIChatInterface.tsx" (\n    copy "ai-game-assistant\\components\\AIChatInterface.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\components\\FileUpload.tsx" (\n    copy "ai-game-assistant\\components\\FileUpload.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\components\\StatusDisplay.tsx" (\n    copy "ai-game-assistant\\components\\StatusDisplay.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\components\\ROMManager.tsx" (\n    copy "ai-game-assistant\\components\\ROMManager.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\components\\SettingsPanel.tsx" (\n    copy "ai-game-assistant\\components\\SettingsPanel.tsx" "%PACKAGE_DIR%\\ai-game-assistant\\components\\" >nul 2>&1\n)\n\nREM Copy services if they exist\nif exist "ai-game-assistant\\services\\aiService.ts" (\n    copy "ai-game-assistant\\services\\aiService.ts" "%PACKAGE_DIR%\\ai-game-assistant\\services\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\services\\gameService.ts" (\n    copy "ai-game-assistant\\services\\gameService.ts" "%PACKAGE_DIR%\\ai-game-assistant\\services\\" >nul 2>&1\n)\nif exist "ai-game-assistant\\services\\socketService.ts" (\n    copy "ai-game-assistant\\services\\socketService.ts" "%PACKAGE_DIR%\\ai-game-assistant\\services\\" >nul 2>&1\n)\n\nREM Copy built frontend files if they exist\nif exist "ai-game-assistant\\dist\\index.html" (\n    copy "ai-game-assistant\\dist\\index.html" "%PACKAGE_DIR%\\ai-game-assistant\\dist\\" >nul 2>&1\n    xcopy "ai-game-assistant\\dist\\assets" "%PACKAGE_DIR%\\ai-game-assistant\\dist\\assets\\" /E /I /Y >nul 2>&1\n)\n\necho [OK] Frontend files copied successfully\n\nREM ================================================================\nREM STEP 3: Copy Startup Scripts\nREM ================================================================\necho.\necho [STEP 3/6] Copying startup scripts...\n\ncopy "unified_startup.bat" "%PACKAGE_DIR%\\" >nul 2>&1\ncopy "unified_startup.ps1" "%PACKAGE_DIR%\\" >nul 2>&1\ncopy "unified_startup.sh" "%PACKAGE_DIR%\\" >nul 2>&1\ncopy "install_dependencies.bat" "%PACKAGE_DIR%\\" >nul 2>&1\ncopy "install_dependencies.ps1" "%PACKAGE_DIR%\\" >nul 2>&1\ncopy "install_dependencies.sh" "%PACKAGE_DIR%\\" >nul 2>&1\n\necho [OK] Startup scripts copied successfully\n\nREM ================================================================\nREM STEP 4: Copy Optional Emulators\nREM ================================================================\necho.\necho [STEP 4/6] Copying optional emulators...\n\nif "%INCLUDE_PYBOY%"=="true" (\n    if exist "PyBoy" (\n        mkdir "%PACKAGE_DIR%\\PyBoy"\n        xcopy "PyBoy" "%PACKAGE_DIR%\\PyBoy\\" /E /I /Y >nul 2>&1\n        echo [OK] PyBoy emulator included\n    ) else (\n        echo [WARNING] PyBoy directory not found - skipping\n    )\n)\n\nif "%INCLUDE_PYGBA%"=="true" (\n    if exist "pygba" (\n        mkdir "%PACKAGE_DIR%\\pygba"\n        xcopy "pygba" "%PACKAGE_DIR%\\pygba\\" /E /I /Y >nul 2>&1\n        echo [OK] PyGBA emulator included\n    ) else (\n        echo [WARNING] pygba directory not found - skipping\n    )\n)\n\nREM ================================================================\nREM STEP 5: Copy Documentation\nREM ================================================================\necho.\necho [STEP 5/6] Copying documentation...\n\nif "%INCLUDE_DOCUMENTATION%"=="true" (\n    copy "DEPLOYMENT_STRUCTURE.txt" "%PACKAGE_DIR%\\" >nul 2>&1\n    copy "CLAUDE.md" "%PACKAGE_DIR%\\" >nul 2>&1\n    copy "ai-game-server\\README.md" "%PACKAGE_DIR%\\ai-game-server\\" >nul 2>&1\n    copy "ai-game-assistant\\README.md" "%PACKAGE_DIR%\\ai-game-assistant\\" >nul 2>&1\n\n    echo [OK] Documentation copied successfully\n)\n\nREM ================================================================\nREM STEP 6: Create Deployment Documentation\nREM ================================================================\necho.\necho [STEP 6/6] Creating deployment documentation...\n\nREM Create deployment README\n(\necho # AI Game System - Deployment Package\necho.\necho ## Package Information\necho - **Package Name**: %PACKAGE_NAME%\necho - **Version**: %PACKAGE_VERSION%\necho - **Created**: %date% %time%\necho - **Package Size**: ~30-40 MB (depending on included emulators)\necho.\necho ## Quick Start\necho 1. Extract the package to your desired location\necho 2. Run `install_dependencies.bat` to install required packages\necho 3. Run `unified_startup.bat` to start the system\necho 4. Open your web browser and go to http://localhost:5173\necho.\necho ## System Requirements\necho - **Operating System**: Windows 10/11, macOS, or Linux\necho - **Python**: 3.8 or higher\necho - **Node.js**: 16 or higher\necho - **Memory**: 4 GB RAM minimum, 8 GB recommended\necho - **Storage**: 100 MB free space (minimum)\necho.\necho ## Included Components\necho - **Backend Server**: Flask-based API server with AI integration\necho - **Frontend Web UI**: React-based web interface\necho - **Startup Scripts**: Windows, macOS, and Linux startup scripts\necho - **Dependency Installers**: Automated dependency management\necho.\necho ## Optional Components\nif "%INCLUDE_PYBOY%"=="true" (\n    echo - **PyBoy Emulator**: Game Boy emulator integration\n) else (\n    echo - **PyBoy Emulator**: Not included\n)\nif "%INCLUDE_PYGBA%"=="true" (\n    echo - **PyGBA Emulator**: Game Boy Advance emulator integration\n) else (\n    echo - **PyGBA Emulator**: Not included\n)\necho.\necho ## Port Usage\necho - **Backend API**: http://localhost:5000\necho - **Frontend Web UI**: http://localhost:5173\necho - **Service Monitor**: http://localhost:8080 (optional)\necho.\necho ## Troubleshooting\necho - If you encounter dependency issues, run `install_dependencies.bat` again\necho - If ports are already in use, the system will automatically find available ports\necho - Check the logs/ directory for detailed error information\necho - For more detailed troubleshooting, see the included documentation\necho.\necho ## Support\necho For issues and support, please refer to the included documentation files.\necho.\necho ---\necho This deployment package was created automatically by the AI Game System.\necho Package generated on: %date% at %time%\n) > "%PACKAGE_DIR%\\DEPLOYMENT_README.md"\n\nREM Create version info file\n(\necho AI Game System Deployment Package\necho ==================================\necho Package Name: %PACKAGE_NAME%\necho Version: %PACKAGE_VERSION%\necho Created: %date% %time%\necho Platform: Windows\necho Creator: Deployment Package Creator Script\necho.\necho Included Components:\necho - Core Backend Server: YES\necho - Core Frontend Web UI: YES\necho - Startup Scripts: YES\necho - Dependency Installers: YES\necho - PyBoy Emulator: %INCLUDE_PYBOY%\necho - PyGBA Emulator: %INCLUDE_PYGBA%\necho - Documentation: %INCLUDE_DOCUMENTATION%\necho.\necho Estimated Size: 30-40 MB\necho Minimum Requirements: Python 3.8+, Node.js 16+, 4GB RAM\necho.\necho Files Included:\n) > "%PACKAGE_DIR%\\VERSION_INFO.txt"\n\nREM Count files\nfor /f %%A in ('dir "%PACKAGE_DIR%" /s /b ^| find /v /c ""') do set "FILE_COUNT=%%A"\necho Total Files: %FILE_COUNT% >> "%PACKAGE_DIR%\\VERSION_INFO.txt"\n\necho [OK] Deployment documentation created\n\nREM ================================================================\nREM FINAL STEPS\nREM ================================================================\necho.\necho ================================================================\necho == Package Creation Complete!                               \necho ================================================================\necho.\necho [SUCCESS] Deployment package created successfully!\necho.\necho [PACKAGE DETAILS]\necho -----------------\necho Package Name: %PACKAGE_DIR%\necho Location: %CD%\\%PACKAGE_DIR%\necho Files Included: %FILE_COUNT%\necho Version: %PACKAGE_VERSION%\necho.\necho [NEXT STEPS]\necho ------------\necho 1. Copy the entire "%PACKAGE_DIR%" folder to the target system\necho 2. On the target system, run "install_dependencies.bat"\necho 3. Run "unified_startup.bat" to start the system\necho 4. Access the web interface at http://localhost:5173\necho.\necho [PACKAGE CONTENTS]\necho ------------------\necho ✓ Core backend server files\necho ✓ Core frontend web interface\necho ✓ Startup scripts for all platforms\necho ✓ Dependency installation scripts\nif "%INCLUDE_PYBOY%"=="true" (\n    echo ✓ PyBoy emulator integration\n)\nif "%INCLUDE_PYGBA%"=="true" (\n    echo ✓ PyGBA emulator integration\n)\nif "%INCLUDE_DOCUMENTATION%"=="true" (\n    echo ✓ Complete documentation\n)\necho.\necho [OPTIONAL: CREATE ZIP ARCHIVE]\necho ----------------------------\necho Would you like to create a ZIP archive of the package?\necho This will make it easier to distribute.\necho.\nset /p create_zip="Create ZIP archive? (y/n): "\nif /i "%create_zip%"=="y" (\n    echo.\n    echo [INFO] Creating ZIP archive...\n    powershell -Command "Compress-Archive -Path '%PACKAGE_DIR%' -DestinationPath '%PACKAGE_DIR%.zip' -Force"\n    if %errorlevel% equ 0 (\n        echo [SUCCESS] ZIP archive created: %PACKAGE_DIR%.zip\n        echo.\n        echo [ARCHIVE INFO]\n        echo --------------\n        echo Archive File: %PACKAGE_DIR%.zip\n        echo Archive Size:\n        dir "%PACKAGE_DIR%.zip" | findstr "%PACKAGE_DIR%.zip"\n    ) else (\n        echo [ERROR] Failed to create ZIP archive\n    )\n)\n\necho.\necho [DEPLOYMENT COMPLETE]\necho =====================\necho Your AI Game System deployment package is ready!\necho.\necho Package Directory: %CD%\\%PACKAGE_DIR%\necho Package Version: %PACKAGE_VERSION%\necho Instructions: See %PACKAGE_DIR%\\DEPLOYMENT_README.md\necho.\necho Thank you for using the AI Game System!\necho.\npause\nexit /b 0